today
summer_break <- as.Date("2018-08-06")
summer_break
days_to_break <- summer_break - today
days_to_break
make_birthday_date <- function(name, age, "")
make_birthday_date <- function(name, age, str)
)
make_introduction(name, age)
return(full)
make_birthday_date <- function(name, age, birthday) {
full <- make_introduction(name, age) +
"In" + (birthday - today) + "days I'll be" + age + "."
return(full)
}
make_birthday_date()
make_birthday_date("Yeh-Sun", "19", "1998-18-11")
make_birthday_date <- function(name, age, birthday) {
full <- paste(make_introduction(name, age), "In", today - birthday, "I'll be", age)
return(full)
}
make_birthday_date("Yeh-Sun", "19", "1998-18-11")
make_birthday_date("Yeh-Sun", "10". "2018-18-11")
make_birthday_date("Yeh-Sun", "10", "2018-18-11")
make_birthday_date <- function(name, age, birthday) {
full <- paste(make_introduction(name, age), "In", today - birthday, "I'll be", age)
return(full)
}
make_birthday_date("Yeh-Sun", "19", "2018-18-11")
make_birthday_date <- function(name, age, birthday) {
return(paste(make_introduction(name, age)))
}
make_birthday_date("yeh-sun", "19", "2018-18-11")
make_birthday_date <- function(name, age, birthday) {
n_days <- today - birthday
return(paste(make_introduction(name, age), "In", n_days, "I'll be", age "."))
}
make_birthday_date <- function(name, age, birthday) {
n_days <- today - birthday
return(paste(make_introduction(name, age), "In", n_days, "I'll be", age, "."))
}
make_birthday_date("yeh-sun", "19", "2018-18-11")
make_birthday_date <- function(name, age, birthday) {
n_days <- today - as.Date("2018-18-11")
return(paste(make_introduction(name, age), "In", n_days, "I'll be", age, "."))
}
make_birthday_date <- function(name, age, birthday) {
n_days <- today - as.Date(birthday)
return(paste(make_introduction(name, age), "In", n_days, "I'll be", age, "."))
}
make_birthday_date("yeh-sun", "19", "2018-18-11")
make_birthday_date <- function(name, age, birthday) {
n_days <- today - as.Date(birthday)
full <- paste(make_introduction(name, age), "In", n_days, "I'll be", age, ".")
return(full)
}
make_birthday_date("yeh-sun", "19", "2018-18-11")
make_birthday_date("yeh-sun", "19", "2018-18-11")
make_birthday_date <- function(name, age, birthday) {
birthday_countdown <- as.Date(birthday) - today
full <- paste(make_introduction(name, age), "In", birthday_countdown, "days I'll be", age + 1)
}
make_birthday_date <- function(name, age, birthday) {
birthday_countdown <- as.Date(birthday) - today
full <- paste(make_introduction(name, age), "In", birthday_countdown, "days I'll be", age + 1)
}
make_birthday_date("yehsun", "19", "2018-18-11")
make_birthday_date <- function(name, age, birthday) {
birthday_countdown <- as.Date(birthday) - today
full <- paste(make_introduction(name, age))
}
make_birthday_date("yehsun", "19" "2018-18-11")
make_birthday_date("yehsun", "19", "2018-18-11")
make_birthday_date("yehsun", "19", "2018/18/11")
make_birthday_date("yehsun", "19". "11/18/2018")
make_birthday_date("yehsun", "19", "11/18/2018")
make_birthday_date("yehsun", "19", "11-18-2018")
make_birthday_date <- function(name, age, birthday) {
birthday_countdown <- birthday - today
x <- c(make_introduction(name, age), birthday_countdown)
return(toString(c))
}
make_birthday_date("yehsun", "19", "11-18-2018")
make_birthday_date("yehsun", "19", "2018-18-11")
make_birthday_date <- function(name, age, birthday) {
birthday_countdown <- as.Date(birthday) - today
x <- c(make_introduction(name, age), birthday_countdown)
return(toString(c))
}
make_birthday_date("yehsun", "19", "2018-18-11")
make_birthday_date <- function(name, age, birthday) {
birthday_countdown <- as.Date(birthday) - today
x <- c(make_introduction(name, age), birthday_countdown)
return(toString(x))
}
mka
make_birthday_date("yehsun", "19", "2018-18-11")
make_birthday_date("yehsun", "19", "2018-11-18")
make_birthday_date <- function(name, age, birthday) {
birthday_countdown <- as.Date(birthday) - today
x <- c(make_introduction(name, age), "In", birthday_countdown, "days I'll be", age)
return(toString(x))
}
make_birthday_date("yehsun", "19", "2018-11-18")
make_birthday_date <- function(name, age, birthday) {
birthday_countdown <- as.Date(birthday) - today
x <- paste(make_introduction(name, age), "In", birthday_countdown, "days I'll be", age)
return(toString(x))
}
make_birthday_date("yehsun", "19", "2018-11-18")
make_birthday_date <- function(name, age, birthday) {
birthday_countdown <- as.Date(birthday) - today
x <- paste(make_introduction(name, age), "In", birthday_countdown,
"days I'll be", age)
return(toString(x))
}
make_birthday_date("Jo", "20", "2018-11-18")
my_name <- "Yeh-Sun"
make_introduction <- function(name, age) {
full_intro <- paste("Hello, my name is", name, "and I'm", age, "years old.")
return(full_intro)
}
make_birthday_date <- function(name, age, birthday) {
birthday_countdown <- as.Date(birthday) - today
x <- paste(make_introduction(name, age), "In", birthday_countdown,
"days I'll be", age)
return(toString(x))
}
make_birthday_date("yeh", "20", "2018-11-18")
make_birthday_date <- function(name, age, birthday) {
birthday_countdown <- as.Date(birthday) - today
x <- paste(make_introduction(name, age), "In", birthday_countdown,
"days I'll be", age + 1)
return(toString(x))
}
make_birthday_date("jo", "19", "2018-11-18")
make_birthday_date <- function(name, age, birthday) {
birthday_countdown <- as.Date(birthday) - today
x <- paste(make_introduction(name, age), "In", birthday_countdown,
"days I'll be", (age + 1))
return(toString(x))
}
make_birthday_date("yeh", "19", "2018-11-18")
make_birthday_date <- function(name, age, birthday) {
n <- as.Date(birthday) - today
new_age <- age + 1
x <- paste(make_introduction(name, age), "In", birthday_countdown,
"days I'll be", new_age)
return(toString(x))
}
make_birthday_date("ye", "19", "2018-11-18")
make_birthday_date <- function(name, age, birthday) {
n <- as.Date(birthday) - today
new_age <- c(age + 1)
x <- paste(make_introduction(name, age), "In", birthday_countdown,
"days I'll be", new_age)
return(toString(x))
}
make_birthday_date("yeh", "19", "2018-11-18")
make_birthday_date <- function(name, age, birthday) {
n <- as.Date(birthday) - today
new_age <- paste(age + 1)
x <- paste(make_introduction(name, age), "In", birthday_countdown,
"days I'll be", new_age)
return(toString(x))
}
make_birthday_date("yeh", "19", "2018-11-18")
make_birthday_date <- function(name, age, birthday) {
n <- as.Date(birthday) - today
new_age <- c(as.integer(age + 1))
x <- paste(make_introduction(name, age), "In", birthday_countdown,
"days I'll be", new_age)
return(toString(x))
}
make_birthday_date("eyh", "19", "2018-11-18")
make_birthday_date <- function(name, age, birthday) {
n <- as.Date(birthday) - today
new_age <- c(as.integer(age) + 1)
x <- paste(make_introduction(name, age), "In", birthday_countdown,
"days I'll be", new_age)
return(toString(x))
}
make_birthday_date("yeh", "19", "2018-11-18")
make_birthday_date <- function(name, age, birthday) {
n <- as.Date(birthday) - today
new_age <- c(as.integer(age) + 1)
x <- paste(make_introduction(name, age), "In", n,
"days I'll be", new_age)
return(toString(x))
}
make_birthday_date("eh", "19", "2018-11-18")
make_birthday_date <- function(name, age, birthday) {
n <- birthday - today
new_age <- c(as.integer(age) + 1)
x <- paste(make_introduction(name, age), "In", n,
"days I'll be", new_age)
return(toString(x))
}
make_birthday_date("yehsun", "19". "2018-11-18")
make_birthday_date("yehsun", "19", "2018-11-18")
make_birthday_date <- function(name, age, birthday) {
n <- as.Date(birthday) - today
new_age <- c(as.integer(age) + 1)
x <- paste(make_introduction(name, age), "In", n,
"days I'll be", new_age)
return(toString(x))
}
make_birthday_date("Yeh-Sun", "19", "2018-11-18")
make_birthday_date <- function(name, age, birthday) {
n <- as.Date(birthday) - today
new_age <- c(as.integer(age) + 1)
x <- paste(make_introduction(name, age), "In", n,
"days I'll be", new_age, ".")
return(toString(x))
}
my_bday_intro <- make_birthday_date(my_name, my_age, "2018-11-18")
my_bday_intro
make_birthday_date <- function(name, age, birthday) {
n <- as.Date(birthday) - today
new_age <- c(as.integer(age) + 1)
x <- paste(make_introduction(name, age), "In", n,
"days I'll be", new_age, ".", sep = "")
return(toString(x))
}
make_birthday_date("yeh", "19", "2018-11-18")
make_birthday_date <- function(name, age, birthday) {
n <- as.Date(birthday) - today
new_age <- c(as.integer(age) + 1)
x <- paste(make_introduction(name, age), "In ", n,
" days I'll be ", new_age, ".", sep = "")
return(toString(x))
}
make_birthday_date("yeh", "219", "2018-11-18")
make_birthday_date <- function(name, age, birthday) {
n <- as.Date(birthday) - today
new_age <- c(as.integer(age) + 1)
x <- paste(make_introduction(name, age), " In ", n,
" days I'll be ", new_age, ".", sep = "")
return(toString(x))
}
make_birthday_date("yeh", "19", "2018-11-19")
my_bday_intro <- make_birthday_date(my_name, my_age, "2018-11-18")
my_bday_intro
make_birthday_date <- function(name, age, birthday) {
n <- as.Date(birthday) - today
new_age <- c(age + 1)
x <- paste(make_introduction(name, age), " In ", n,
" days I'll be ", new_age, ".", sep = "")
}
make_birthday_date("yeh", "19", "2018-11-18")
make_birthday_date <- function(name, age, birthday) {
n <- as.Date(birthday) - today
new_age <- age + 1
x <- paste(make_introduction(name, age), " In ", n,
" days I'll be ", new_age, ".", sep = "")
}
make_birthday_date("yeh", "19", "2018-11-18")
make_birthday_date("yeh", 19, "2018-11-18")
make_birthday_date <- function(name, age, birthday) {
n <- as.Date(birthday) - today
new_age <- age + 1
x <- paste(make_introduction(name, age), " In ", n,
" days I'll be ", new_age, ".", sep = "")
}
make_birthday_date("yeh", 19, "2018-11-18")
make_birthday_date <- function(name, age, birthday) {
n <- as.Date(birthday) - today
new_age <- age + 1
paste(make_introduction(name, age), " In ", n,
" days I'll be ", new_age, ".", sep = "")
}
make_birthday_date("yeh", 19, "2018-11-18")
make_birthday_date <- function(name, age, birthday) {
n <- birthday - today
new_age <- age + 1
paste(make_introduction(name, age), " In ", n,
" days I'll be ", new_age, ".", sep = "")
}
make_birthday_date("yeh", 19, 2018-11-18)
make_birthday_date("yeh", 19 "2018-11-18")
make_birthday_date("yeh", 19, "2018-11-18")
make_birthday_date <- function(name, age, birthday) {
n <- as.Date(birthday) - today
new_age <- age + 1
paste(make_introduction(name, age), " In ", n,
" days I'll be ", new_age, ".", sep = "")
}
?gsub
remove_digits <- function(vector_strings) {
gsub(0:9, "", vector_strings)
}
remove_digits(Hack3r)
remove_digits <- function(string) {
gsub(0:9, "", vector_strings)
}
remove_digits(H4ck3R)
remove_digits <- function(string) {
gsub(0:9, "", string)
}
remove_digits(H4ck3r)
remove_digits("H4ck3R")
remove_digits <- function(string) {
gsub("0:9", "", string)
}
remove_digits("H4Cker")
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(string) {
gsub([0:9], "", string)
}
remove_digits <- function(string) {
gsub([0:9], "", string)
}
remove_digits <- function(string) {
gsub('[0:9]', "", string)
}
remove_digits("h23r")
remove_digits <- function(string) {
gsub("[0:9]", "", string)
}
remove_digits("H12R")
remove_digits <- function(string) {
gsub("[0:9]+", "", string)
}
remove_digits("H12R")
remove_digits <- function(string) {
gsub('[0:9]+', '', string)
}
remove_digits("Ha3r")
remove_digits('hair2')
library(stringr)
remove_digits <- function(string) {
gsub('[0:9]+', '', string)
}
remove_digits("hac2"0)
remove_digits("Hack2R")
remove_digits <- function(string) {
gsub('[0-9]+', '', string)
}
remove_digits("hac3R")
remove_digits <- function(string) {
gsub('"[0-9]+", "", string)
}
remove_digits("hack2r")
)
}
remove_digits <- function(string) {
gsub("[0-9]+", "", string)
}
remove_digits("As")
remove_digits <- function(string) {
gsub('[0-9]+', '', string)
}
library(ggplot2)
library(ggplot2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
library(ggplot2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
library(ggplot2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
library(ggplot2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
install.packages("ggplot2")
library(ggplot2)
library(dplyr)
?diamonds
colnames(diamonds)
row_number(diamonds)
sample_n(diamonds, 1000)
diamonds_sample <- sample_n(diamonds, 1000)
ggplot(data = diamonds_sample)
geom_point(mapping = aes(x = carat, y = mapped))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = mapped))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = "blue")
View(diamonds_sample)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, shape = cut)
)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, shape = cut))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, size = price))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = "blue")
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, size = price))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, shape = cut, color = price))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = cut, size = price, color = price))
ggplot(data = diamonds_sample) +
geom_smooth(mapping = aes(x = carat, y = price, color = cut))
ggplot(data = diamonds_sample) +
geom_line(mapping = aes(x = carat, y = price, color = cut))
ggplot(data = diamonds_sample) +
geom_smooth(mapping = aes(x = carat, y = price, color = cut))
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cut))
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cut, color = clarity))
ggplot(data = diamonds_sample) +
stat_bin(aes(x = cut, color = clarity))
ggplot(data = diamonds_sample) +
stat_bin(mapping = aes(x = cut, color = clarity))
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cut, color = clarity))
ggplot(data = diamonds_sample) +
stat_bin(mapping = aes(x = cut, fill = clarity))
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cut, fill = clarity))
ggplot(data = diamonds_sample) +
stat_bin(aes(x = cut, fill = clarity))
ggplot(data = diamonds_sample) +
stat_count(aes(x = cut, fill = clarity))
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cut, fill = clarity))
ggplot(data = diamonds_sample) +
stat_count(aes(x = cut, fill = clarity, depth))
ggplot(data = diamonds_sample) +
stat_count(aes(x = depth, fill = clarity))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = "pink")
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, alpha = 0.3), color = "pink")
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, alpha = 0.3), color = "pink") +
geom_smooth(mapping = aes(x= carat, y = price), color = "purple")
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, alpha = 0.3), color = "pink") +
geom_smooth(mapping = aes(x= carat, y = price, alpha = 0.3), color = "purple")
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, alpha = 0.3), color = "purple") +
geom_smooth(mapping = aes(x= carat, y = price), color = "pink")
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, alpha = 0.3), color = "purple") +
geom_smooth(mapping = aes(x= carat, y = price), color = "pink")
RColorBrewer::display.brewer.all()
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cut, fill = clarity)) +
scale_fill_brewer(palette = "Pastel 1")
# Exercise 1: ggplot2 basics
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
library(ggplot2)
library(dplyr)
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
?diamonds
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- sample_n(diamonds, 1000)
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
ggplot(data = diamonds_sample)
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cut, fill = clarity)) +
scale_fill_brewer(palette = "Pastel 1")
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cut, fill = clarity)) +
scale_fill_brewer(palette = "Pastel1")
library(ggplot2)
?diamonds
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = count))
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cut, y = count))
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cut, y = count), stat = "count")
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cut), stat = "count")
ggplot(data = mpg) +
stat_count(mapping = aes(x = cut), stat = "count")
ggplot(data = diamonds_sample) +
stat_count(mapping = aes(x = cut), stat = "count")
ggplot(data = diamonds_sample) +
geom_stat_count(mapping = aes(x = cut), stat = "count")
ggplot(data = diamonds_sample) +
stat_count(mapping = aes(x = cut), stat = "count")
ggplot(data = diamonds) +
stat_count(mapping = aes(x = cut), stat = "identity")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut), stat = "identity")
ggplot(data = diamonds_sample) +
stat_summary(mapping = aes(x = cut, y = depth))
ggplot(data = diamonds_sample) +
geom_bar(mapping = aes(x = cut, fill = clarity)) +
scale_fill_brewer(palette = "Pastel1")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity)) +
scale_fill_brewer(palette = "Pastel2")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = count), stat = "identity")
setwd("~/Desktop/INFO/practice/ch13-ggplot2/exercise-1")
